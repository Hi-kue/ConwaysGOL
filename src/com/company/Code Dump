package com.company;
import javax.swing.JPanel;
import javax.swing.Timer;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;


public class golpanel extends JPanel implements ActionListener,
        MouseListener, MouseMotionListener, KeyListener{

    int xPanel = 1000, yPanel = 500, size = 10;
    int xwidth = xPanel / size, yheight = yPanel / size;

    int[][] gridvalues = new int[xwidth][yheight];
    int[][] preGridValues = new int[xwidth][yheight];

    boolean startProgram = true;
    int initial = -1;

    Timer time;

    /*Method Works*/
    public golpanel() {

        setSize(xPanel, yPanel);
        setLayout(null);

        addMouseMotionListener(this);
        addMouseListener(this);
        addKeyListener(this);
        setFocusable(true);

        setBackground(Color.BLACK);

        time = new Timer(80, this);
    }

    /*Method Works*/
    public void paint(Graphics grid) {

        super.paint(grid);

        grid(grid);
        display(grid);

    }

    /*Method Works*/
    private void grid(Graphics grid) {

        for (int i = 0; i < gridvalues.length; i++) {

            grid.drawLine(0, i * size, xPanel, i * size);

            grid.drawLine(i * size, 0, i * size, yPanel);
        }
    }

    private void spawn() {
        for (int x = 0; x < gridvalues.length; x++) {

            for (int y = 0; y < yheight; y++) {

                if ((int)(Math.random() * 5) == 0) {

                    gridvalues[x][y] = 1;

                }
            }
        }
        repaint();
    }

    /*Method Works*/
    private void display(Graphics grid) {
        grid.setColor(Color.DARK_GRAY);
        copyArray();

        for (int x = 0; x < gridvalues.length; x++) {

            for (int y = 0; y < yheight; y++) {

                if(gridvalues[x][y] == 1) {

                    grid.fillRect(x * size, y * size, size, size);
                }
            }
        }
    }

    /*Method Works*/
    private void copyArray() {

        for (int x = 0; x < gridvalues.length; x++) {

            for (int y = 0; y < yheight; y++) {

                if(gridvalues[x][y] == 1) {

                    preGridValues[x][y] = gridvalues[x][y];

                }
            }
        }
    }

    private int checkAlive(int x, int y) {

        int isAlive = 0;

        isAlive += gridvalues[(x + xwidth - 1) % xwidth][(y + yheight - 1) % yheight];
        isAlive += gridvalues[(x + xwidth) % xwidth][(y + yheight - 1) % yheight];
        isAlive += gridvalues[(x + xwidth + 1) % xwidth][(y + yheight - 1) % yheight];

        isAlive += gridvalues[(x + xwidth - 1) % xwidth][(y + yheight) % yheight];
        isAlive += gridvalues[(x + xwidth + 1) % xwidth][(y + yheight) % yheight];
        isAlive += gridvalues[(x + xwidth - 1) % xwidth][(y + yheight + 1) % yheight];

        isAlive += gridvalues[(x + xwidth) % xwidth][(y + yheight + 1) % yheight];
        isAlive += gridvalues[(x + xwidth  + 1) % xwidth][(y + yheight + 1) % yheight];

        return isAlive;

    }

    /*Method Works*/
    private void clear() {
        for (int x = 0; x < gridvalues.length; x++) {

            for (int y = 0; y < yheight; y++) {
                gridvalues[x][y] = 0;
            }
        }
    }

    /*Method Works*/
    public void actionPerformed(ActionEvent e) {

        int isAlive;

        for (int x = 0; x < gridvalues.length; x++) {

            for (int y = 0; y < yheight; y++) {

                if(gridvalues[x][y] == 1) {

                    isAlive = checkAlive(x, y);

                    if(isAlive == 3) {
                        preGridValues[x][y] = 1;

                    }else if(isAlive == 2 && gridvalues[x][y] == 1) {
                        preGridValues[x][y] = 1;

                    }else {
                        preGridValues[x][y] = 0;

                    }
                }
            }
        }
        repaint();
    }

    /*Method Works*/
    public void mouseDragged(MouseEvent e) {
        int x = e.getX() / size, y = e.getY() / size;

        if (gridvalues[x][y] == 0 && initial == 0) {
            gridvalues[x][y] = 1;

        }else if(gridvalues[x][y] == 1 && initial == 1) {
            gridvalues[x][y] = 0;

        }

        repaint();
    }

    /*Method Works*/
    public void mousePressed(MouseEvent e) {
        int x = e.getX() / size, y = e.getY() / size;

        if (gridvalues[x][y] == 0) {
            initial = 0;

        }else {
            initial = 1;

        }

        repaint();
    }

    /*Method Works*/
    public void mouseReleased(MouseEvent e) {
        initial = -1;

    }

    /*Method Works*/
    public void keyPressed(KeyEvent e) {
        int code = e.getKeyCode();

        if(code == KeyEvent.VK_R) {
            spawn();
            time.start();

        } else if(code == KeyEvent.VK_C) {
            clear();
            time.stop();

        } else if(code == KeyEvent.VK_S) {
            time.start();
        } else if(code == KeyEvent.VK_A) {
            time.stop();
        }
        repaint();
    }

    /*<><><><><><><><><><><><><><><><><><><><><><><>*/
    public void keyTyped(KeyEvent e) {}

    public void keyReleased(KeyEvent e) {}

    public void mouseMoved(MouseEvent e) {}

    public void mouseClicked(MouseEvent e) {}

    public void mouseEntered(MouseEvent e) {}

    public void mouseExited(MouseEvent e) {}
    /*<><><><><><><><><><><><><><><><><><><><><><><>*/
}
